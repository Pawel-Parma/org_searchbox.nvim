==============================================================================
*searchbox*

Start your search from a more comfortable place, say the upper right corner?

==============================================================================
Introduction                                                 *searchbox-intro*

Searchbox attempts to provide an alternative user experience to the whole
search and replace process, by providing a set UI components. Floating inputs
and menus are used instead of the built-in command-line, hopefully to make the
process more intuitive.

==============================================================================
Search Types                                          *searchbox-search-types*

There are four kinds of search:

incsearch: ~
    Highlights the nearest match of your query as you type.

match_all: ~
    Highlights all the matches in the buffer as you type. By default matches
    will stay highlighted after you submit your search. You can clear them
    with `:SearchBoxClear`. If you want the highlight to disapear after
    the input closes, add the `clear_matches` argument (more on this later).

simple: ~
    Doesn't do anything as you type. No highlight, no moving the cursor
    around in realtime. It's only purpose is to execute a search.

replace: ~
    Starts a multi-step input to search and replace. First input allows you to
    enter a pattern (search term). Second input will ask for the string that
    will replace the previous pattern.

==============================================================================
Usage                                                  *searchbox-basic-usage*

There is a command for each kind of search which can be used in a keybinding.

* Lua Bindings

>
  vim.api.nvim_set_keymap(
    'n',
    '<leader>s',
    ':SearchBoxIncSearch<CR>',
    {noremap = true}
  )
<

* Vimscript Bindings

>
  nnoremap <leader>s :SearchBoxIncSearch<CR>
<

They are also exposed as lua functions, so the following is also valid.

>
  :lua require('searchbox').incsearch()<CR>
<

Visual mode                                    *searchbox-visual-mode-support*

To get proper support in visual mode you'll need to add `visual_mode=true`
to the list of arguments.

In this mode the search area is limited to the range set by the selected text.
Similar to the `substitute` command in this case `:'<,'>s/one/two/g`.

* lua

>
  vim.api.nvim_set_keymap(
    'x',
    '<leader>s',
    ':SearchBoxIncSearch visual_mode=true<CR>',
    {noremap = true}
  )
<

* vimscript

>
  xnoremap <leader>s :SearchBoxIncSearch visual_mode=true<CR>
<

When using the lua api add `<Esc>` at the beginning of the binding.

>
  <Esc>:lua require('searchbox').incsearch({visual_mode = true})<CR>
<

==============================================================================
Search Options                                      *searchbox-search-options*

You can tweak the behaviour of the search if you pass a table with any
of these keys:

reverse: ~
    Look for matches above the cursor.

exact: ~
    Look for an exact match.

title: ~
    Set title for the popup window.

prompt: ~
    Set input prompt.

default_value: ~
    Set initial value for the input.

visual_mode: ~
    Search only in the recently selected text.

Other arguments are exclusive to one type of search.

                                                 *searchbox.match_all.options*
For `match_all`

clear_matches: ~
    Get rid of the highlight after the search is done.

                                                   *searchbox.replace.options*
For `replace`

confirm: ~
    Ask the user to choose an action on each match. There are three possible
    values: `off`, `native` and `menu`. `off` disables the feature.  `native`
    uses neovim's built-in confirm method. `menu` displays a list of possible
    actions below the match. Is worth mentioning `menu` will only show up
    if neovim's window is big enough, confirm type will fallback to "native"
    if it isn't.

==============================================================================
Command api                                            *searchbox-command-api*

When using the command api the arguments are a space separated list of
key/value pairs. The syntax for the arguments is this: `key=value`.

>
  :SearchBoxMatchAll title=Match exact=true visual_mode=true<CR>
<

Because whitespace acts like a separator between the arguments if you want
to use it as a value you need to escape it, or use a quoted argument. If you
want to use `Match All` as a title, these are your options.

>
  :SearchBoxMatchAll title="Match All"<CR>
<

Or

>
  :SearchBoxMatchAll title='Match All'<CR>
<

Without quotes.

>
  :SearchBoxMatchAll title=Match\ All<CR>
<

Note that escaping is specially funny inside a lua string, so you might need
to use `\\`.

Is worth mention that argument parsing is done manually inside the plugin.
Complex escape sequences are not taken into account. Just `\"` and `\'` to
avoid conflict in quoted arguments, and `\ ` to escape whitespace in a string
argument without quotes.


Not being able to use whitespace freely makes it difficult to use
`default_value` with this api, that's why it gets a special treatment.
There is no `default_value` argument, instead everything that follows
the `--` argument is considered part of the search term.

>
  :SearchBoxMatchAll title=Match clear_matches=true -- My search term<CR>
<

In the example above `My search term` will become the initial value for the
search input. This becomes useful when you want to use advance techniques to
set the initial value of your search (I'll show you some examples later).

If you only going to set the initial value, meaning you're not going to use
any of the other arguments, you can omit the `--`. This is valid, too.

>
  :SearchBoxMatchAll My search term<CR>
<

==============================================================================
Lua api                                                    *searchbox-lua-api*

In this case you'll be using lua functions of the `searchbox` module instead
of commands. The arguments can be provided as a lua table.

>
  :lua require('searchbox').match_all({title='Match All', clear_matches=true, default_value='My search term'})<CR>
<

==============================================================================
Default keymaps                                            *searchbox-keymaps*

Inside the input you can use the following keymaps:
    * `Alt + .`: Writes the content of the last search in the input.
    * `Enter`: Submit input.
    * `Esc`: Closes input.
    * `Ctrl + c`: Close input.
    * `Ctrl + y`: Scroll up.
    * `Ctrl + e`: Scroll down.
    * `Ctrl + b`: Scroll page up.
    * `Ctrl + f`: Scroll page down.

In the confirm menu (of search and replace):
    * `y`: Confirm replace.
    * `n`: Move to next match.
    * `a`: Replace all matches.
    * `q`: Quit menu.
    * `l`: Replace match then quit. Think of it as "the last replace".
    * `Enter`: Accept option.
    * `Esc`: Quit menu.
    * `ctrl + c`: Quit menu.
    * `Tab`: Next option.
    * `shift + Tab`: Previous option.
    * `Down arrow`: Next option.
    * `Up arrow`: Previous option.

The "native" confirm method:
    * `y`: Confirm replace.
    * `n`: Move to next match.
    * `a`: Replace all matches.
    * `q`: Quit menu.
    * `l`: Replace match then quit.

==============================================================================
Configuration                                     *searchbox-general-settings*

If you want to change anything in the `UI` or add a "hook"
you can use `.setup()`.

This are the defaults.

>
  require('searchbox').setup({
    popup = {
      relative = 'win',
      position = {
        row = '5%',
        col = '95%',
      },
      size = 30,
      border = {
        style = 'rounded',
        highlight = 'FloatBorder',
        text = {
          top = ' Search ',
          top_align = 'left',
        },
      },
      win_options = {
        winhighlight = 'Normal:Normal',
      },
    },
    hooks = {
      before_mount = function(input)
        -- code
      end,
      after_mount = function(input)
        -- code
      end
    }
  })
<
                                                             *searchbox.popup*
popup options: ~
    They control the popup's settings. Accepts any valid key/value pair
    that a `nui.popup` can handle. For more details refer to `nui.nvim`
    documentation:
    https://github.com/MunifTanjim/nui.nvim/tree/main/lua/nui/popup#options

                                                    *searchbox.popup.relative*
popup.relative: ~
    This option affects how `position` and `size` are calculated.

                                                    *searchbox.popup.position*
popup.position: ~
    Determines in which part of the screen the input should be drawn.

                                                        *searchbox.popup.size*
popup.size: ~
    Controls the size of the popup. If `size` can be a `number` or
    `percentage string`, can also be a table with `width` and `height`.
    Do note input can only have `1` line.

                                                      *searchbox.popup.border*
popup.border: ~
    Contains all border related options like style, text highlight, etc.

                                                 *searchbox.popup.win_options*
popup.win_options: ~
    You can set any variable local to a window (like 'signcolumn').
    See |options.txt|

                                                 *searchbox.popup.buf_options*
popup.buf_options: ~
    You can set any variable local to a window (like 'filetype').
    See |options.txt|

                                                             *searchbox.hooks*
hooks: ~
    Functions that will be executed during the lifecycle of the input.

                                                *searchbox.hooks.before_mount*
hooks.before_mount: ~
    Gets executed before the input drawn in the screen. Receives the instance
    of the input as a parameter.

                                                 *searchbox.hooks.after_mount*
hooks.after_mount: ~
    Gets executed after the input is drawn on the screen. Receives the
    instance of the input as a parameter.

==============================================================================
Examples                                                  *searchbox-examples*

Make a reverse search, like the default `?`:

>
  :SearchBoxIncSearch reverse=true<CR>
<

Make the highlight of `match_all` go away after submit.

>
  :SearchBoxMatchAll clear_matches=true<CR>
<

Move to the nearest exact match without any fuss.

>
  :SearchBoxSimple exact=true<CR>
<

Start a search and replace.

>
  :SearchBoxReplace<CR>
<

Use the word under the cursor to begin search and replace. (Normal mode).

>
  :SearchBoxReplace -- <C-r>=expand('<cword>')<CR><CR>
<

Look for the exact word under the cursor.

>
  :SearchBoxMatchAll exact=true -- <C-r>=expand('<cword>')<CR><CR>
<

Use the selected text as a search term. (Visual mode):

Due to limitations on the input, it can't handle newlines well or even the
escape sequence `\n`. So whatever you have selected, must be one line.

>
  y:SearchBoxReplace -- <C-r>"<CR>
<

Search and replace within the range of the selected text, and look for an
exact match. (Visual mode)

>
  :SearchBoxReplace exact=true visual_mode=true<CR>
<

Confirm every match of search and replace

- Normal mode:

>
  :SearchBoxReplace confirm=menu<CR>
<

- Visual mode:

>
  :SearchBoxReplace confirm=menu visual_mode=true<CR>
<

==============================================================================
Caveats                                                    *searchbox-caveats*

It's very possible this plugin can't simulate every feature of the
built-in search (`/` and  `?`).

==============================================================================
Support                                                   *searchbox-donation*

If you find this tool useful and want to support my efforts, consider
leaving a tip in https://www.buymeacoffee.com/vonheikemen

