==============================================================================
*searchbox*

Start your search from a more comfortable place, say the upper right corner?

==============================================================================
Introduction                                                 *searchbox-intro*

Searchbox attempts to provide an alternative user experience to the whole
search and replace process, by providing a set UI components. Floating inputs
and menus are used instead of the built-in command-line, hopefully to make the
process more intuitive.

==============================================================================
Search Types                                          *searchbox-search-types*

There are four kinds of search:

incsearch: ~
    Highlights the nearest match of your query as you type.

match_all: ~
    Highlights all the matches in the buffer as you type. By default matches
    will stay highlighted after you submit your search. You can clear them
    with `:SearchBoxClear`. If you want the highlight to disapear after
    the input closes, add the `clear_matches` argument (more on this later).

simple: ~
    Doesn't do anything as you type. No highlight, no moving the cursor
    around in realtime. It's only purpose is to execute a search.

replace: ~
    Starts a multi-step input to search and replace. First input allows you to
    enter a pattern (search term). Second input will ask for the string that
    will replace the previous pattern.

==============================================================================
Usage                                                  *searchbox-basic-usage*

Each type of search is a lua function you can bind to a key. Example.

* Lua Bindings

>
  vim.api.nvim_set_keymap(
    'n',
    '<leader>s',
    '<cmd>lua require("searchbox").incsearch()<CR>',
    {noremap = true}
  )
<

* Vimscript Bindings

>
  nnoremap <leader>s <cmd>lua require('searchbox').incsearch()<CR>
<

Visual mode                                    *searchbox-visual-mode-support*

In visual mode you'll need to add `<Esc>` at the beginning of the mapping and
use `visual_mode = true` in the arguments.

The search will be limited to the range set by the selected text.  Similar to
what the `substitute` command does in this case `:'<,'>s/this/that/g`

* lua

>
  vim.api.nvim_set_keymap(
    'x',
    '<leader>s',
    '<Esc><cmd>lua require("searchbox").incsearch({visual_mode = true})<CR>',
    {noremap = true}
  )
<

* vimscript

>
  vnoremap <leader>s <Esc><cmd>lua require("searchbox").incsearch({visual_mode = true})<CR>
<

==============================================================================
Search Options                                      *searchbox-search-options*

You can tweak the behaviour of the search if you pass a table with any
of these keys:

reverse: ~
    Look for matches above the cursor.

exact: ~
    Look for an exact match.

title: ~
    Set title for the popup window.

prompt: ~
    Set input prompt.

default_value: ~
    Set initial value for the input.

visual_mode: ~
    Search only in the recently selected text.

There are options exclusive to a single type of search:

                                                 *searchbox.match_all.options*
For `match_all`

clear_matches: ~
    Get rid of the highlight after the search is done.

                                                   *searchbox.replace.options*
For `replace`

confirm: ~
    Ask the user to choose an action on each match. There are three possible
    values: `off`, `native` and `menu`. `off` disables the feature.  `native`
    uses neovim's built-in confirm method. `menu` displays a list of possible
    actions below the match. Is worth mentioning `menu` will only show up
    if neovim's window is big enough, confirm type will fallback to "native"
    if it isn't.

==============================================================================
Default keymaps                                            *searchbox-keymaps*

Inside the input you can use the following keymaps:
    * `Enter`: Submit input.
    * `Esc`: Closes input.
    * `Ctrl + c`: Close input.
    * `Ctrl + y`: Scroll up.
    * `Ctrl + e`: Scroll down.
    * `Ctrl + b`: Scroll page up.
    * `Ctrl + f`: Scroll page down.

In the confirm menu (of search and replace):
    * `y`: Confirm replace.
    * `n`: Move to next match.
    * `a`: Replace all matches.
    * `q`: Quit menu.
    * `l`: Replace match then quit. Think of it as "the last replace".
    * `Enter`: Accept option.
    * `Esc`: Quit menu.
    * `ctrl + c`: Quit menu.
    * `Tab`: Next option.
    * `shift + Tab`: Previous option.
    * `Down arrow`: Next option.
    * `Up arrow`: Previous option.

The "native" confirm method:
    * `y`: Confirm replace.
    * `n`: Move to next match.
    * `a`: Replace all matches.
    * `q`: Quit menu.
    * `l`: Replace match then quit.

==============================================================================
Configuration                                     *searchbox-general-settings*

If you want to change anything in the `UI` or add a "hook"
you can use `.setup()`.

This are the defaults.

>
  require('searchbox').setup({
    popup = {
      relative = 'win',
      position = {
        row = '5%',
        col = '95%',
      },
      size = 30,
      border = {
        style = 'rounded',
        highlight = 'FloatBorder',
        text = {
          top = ' Search ',
          top_align = 'left',
        },
      },
      win_options = {
        winhighlight = 'Normal:Normal',
      },
    },
    hooks = {
      before_mount = function(input)
        -- code
      end,
      after_mount = function(input)
        -- code
      end
    }
  })
<
                                                             *searchbox.popup*
popup options: ~
    They control the popup's settings. Accepts any valid key/value pair
    that a `nui.popup` can handle. For more details refer to `nui.nvim`
    documentation:
    https://github.com/MunifTanjim/nui.nvim/tree/main/lua/nui/popup#options

                                                    *searchbox.popup.relative*
popup.relative: ~
    This option affects how `position` and `size` are calculated.

                                                    *searchbox.popup.position*
popup.position: ~
    Determines in which part of the screen the input should be drawn.

                                                        *searchbox.popup.size*
popup.size: ~
    Controls the size of the popup. If `size` can be a `number` or
    `percentage string`, can also be a table with `width` and `height`.
    Do note input can only have `1` line.

                                                      *searchbox.popup.border*
popup.border: ~
    Contains all border related options like style, text highlight, etc.

                                                 *searchbox.popup.win_options*
popup.win_options: ~
    You can set any variable local to a window (like 'signcolumn').
    See |options.txt|

                                                 *searchbox.popup.buf_options*
popup.buf_options: ~
    You can set any variable local to a window (like 'filetype').
    See |options.txt|

                                                             *searchbox.hooks*
hooks: ~
    Functions that will be executed during the lifecycle of the input.

                                                *searchbox.hooks.before_mount*
hooks.before_mount: ~
    Gets executed before the input drawn in the screen. Receives the instance
    of the input as a parameter.

                                                 *searchbox.hooks.after_mount*
hooks.after_mount: ~
    Gets executed after the input is drawn on the screen. Receives the
    instance of the input as a parameter.

==============================================================================
Examples                                                  *searchbox-examples*

Make a reverse search, like the default `?`:

>
  <cmd>lua require("searchbox").incsearch({reverse = true})<CR>
<

Make the highlight of `match_all` go away after submit.

>
  <cmd>lua require("searchbox").match_all({clear_matches = true})<CR>
<

Move to the nearest exact match without any fuss.

>
  <cmd>lua require("searchbox").simple({exact = true})<CR>
<

Start a search and replace.

>
  <cmd>lua require("searchbox").replace()<CR>
<

Use the word under the cursor to begin search and replace. (Normal mode).

>
  <cmd>lua require('searchbox').replace({default_value = vim.fn.expand('<cword>')})<CR>
<

Use the selected text as a search term. (Visual mode):

Due to limitations on the input, it can't handle newlines well or even the
escape sequence `\n`. So whatever you have selected, must be one line.

>
  y<cmd>lua require('searchbox').replace({default_value = vim.fn.getreg('"')})<CR>
<

Search and replace within the range of the selected text, and look for an
exact match. (Visual mode)

>
  <Esc><cmd>lua require("searchbox").replace({exact = true, visual_mode = true})<CR>
<

Confirm every match of search and replace

- Normal mode:

>
  <cmd>lua require("searchbox").replace({confirm = 'menu'})<CR>
<

- Visual mode:

>
  <Esc><cmd>lua require("searchbox").replace({confirm = 'menu', visual_mode = true})<CR>
<

==============================================================================
Caveats                                                    *searchbox-caveats*

It's very possible this plugin can't simulate every feature of the
built-in search (`/` and  `?`).

==============================================================================
Support                                                   *searchbox-donation*

If you find this tool useful and want to support my efforts, consider
leaving a tip in https://www.buymeacoffee.com/vonheikemen

